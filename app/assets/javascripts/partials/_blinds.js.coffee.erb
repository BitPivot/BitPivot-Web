window.App = {}

App.Blinds = (options) ->
  blinds: []
  totalBlinds: <%= APP_CONFIG.total_blinds %>
  hExpanded: 0
  hCollapsed: 0
  blockScroll: true
  scrolledToTop: null
  scrolledToBottom: null
  disabled: false
  fnFadeIn: options.fnFadeIn or null
  fnScroll: options.fnScroll or null
  fnResize: options.fnResize or null
  fadeDuration: options.fadeDuration or <%= APP_CONFIG.fade_duration %>
  delayScrollDuration: 100
  fnHeaderClick: options.fnHeaderClick or null
  headerIndex: ($header) ->
    $('.blind').index $header.closest '.blind'
  selectedSection: ->
    $ '.blind.expanded'



  resize: (index, expanding, position) ->
    self = this
    $section = @blinds[index]
    self.blockScroll = true

    setTimeout (->
      self.blockScroll = false
      null
    ), @fadeDuration

    $section.animate {scrollTop: 0}, {duration: @fadeDuration, queue: false}

    if expanding
      $section.removeClass 'collapsed'
      $section.addClass 'expanded'
      $section.css
        top: index * @hCollapsed
        height: @hExpanded
    else
      $section.removeClass 'expanded'
      $section.addClass 'collapsed'
      switch position
        when 'top'
          $section.css
            top: index * @hCollapsed,
            height: @hCollapsed
        when 'bottom'
          $section.css
            top: (--index * @hCollapsed) + @hExpanded,
            height: @hCollapsed



  # Event callbacks
  #mousewheelCallback: (sender, e) ->
  #  return if @blockScroll or @delayScrollTransition or @disabled
  #  self = this
  #  $blind = $ e.currentTarget
  #  blindIndex = $('.blind').index $blind
  #  contentElement = $blind.find('.blind-content-area')[0]
  #  $content = $ contentElement
  #
  #  direction = if e.originalEvent.wheelDelta >= 0 then 'up' else 'down'
  #  scrollTop = $content.scrollTop()
  #  scrollHeight = contentElement.scrollHeight
  #  scrollbarPresent = scrollHeight > $content.height()
  #  outerHeight = $content.outerHeight()
  #
  #  switch direction
  #    when 'up'
  #      if blindIndex != 0 # ensure not viewing first blind
  #        if (@scrolledToTop) or not scrollbarPresent
  #          @blinds[blindIndex - 1].find('header').click() # open blind above
  #          @scrolledToTop = false
  #        else
  #          @scrolledToTop = scrollTop is 0
  #          @delayScrollTransition = true
  #          setTimeout (->
  #            self.delayScrollTransition = false), @delayScrollDuration
  #    when 'down'
  #      if blindIndex != (@blinds.length - 1)  # ensure not viewing last blind
  #        if (@scrolledToBottom) or !scrollbarPresent
  #          @blinds[blindIndex + 1].find('header').click() # open blind below
  #          @scrolledToBottom = false
  #        else
  #          @scrolledToBottom = scrollHeight - (scrollTop + 1) is outerHeight\
  #            or scrollHeight - scrollTop is outerHeight
  #          @delayScrollTransition = true
  #          setTimeout (->
  #            self.delayScrollTransition = false), @delayScrollDuration
  #  fnScroll this if @fnScroll  # Custom callback

  resizeCallback: (sender, e) ->
    # Calculate collapsed height from CSS
    $div = $('<div class="blind collapsed"></div>').hide().appendTo 'body'
    @hCollapsed = parseInt($div.height())
    $div.remove()

    # Calculate expanded height based on size of wrapper minus collapsed divs
    @hExpanded = parseInt($('.blinds-wrapper').height() - (@totalBlinds - 1) * @hCollapsed)

    # Call click again on selected section to redraw
    section = this.selectedSection()
    section.find('header').click()

    fnResize(@hExpanded, @hCollapsed) if @fnResize # Custom callback

  expandAll: ->
    @disabled = true
    self = this
    lastTop = 0
    lastHeight = 0
    scrollToTop = 0

    selectedSection = $('.blind.expanded')[0]

    $('body').addClass('full')

    $.each self.blinds, (i, b) ->
      $(b).removeClass('collapsed').addClass('expanded')

      # Calculate height based on content
      contentHeight = 0
      $(b).children().each ->
        contentHeight += $(this).outerHeight(true)

      # Calculate top based on previous blind's height
      contentTop = (lastTop + lastHeight)

      $(b).css
        height: contentHeight,
        top: contentTop

      lastTop = contentTop
      lastHeight = contentHeight
      scrollToTop = contentTop if $(selectedSection).is(b)

    if scrollToTop > 0
      $('html, body').animate
        scrollTop: scrollToTop
        2000
        'swing'

  collaspeAndFocus: ->
    @disabled = false
    self = this

    $('body').removeClass('full')

    # Find focused blind
    windowCenter = $(window).scrollTop() + $(window).height() / 2
    $.each self.blinds, (i, b) ->
      offset = $(b).offset()
      top = offset.top
      bottom = top + $(b).height()
      if (top <= windowCenter) and (bottom > windowCenter)
        $(b).find('header').click()

  orientationCallback: ->
    if window.orientation == 90 or window.orientation == -90
      @expandAll()

    if window.orientation == 0
      @collaspeAndFocus()

  headerClickCallback: (sender, e) ->
    return if @disabled

    index = @headerIndex($(sender))
    i = 0
    while i < @totalBlinds
      expanding = i is index
      position = (if i <= index then "top" else "bottom")
      @resize i, expanding, position
      i++
    fnHeaderClick this if @fnHeaderClick # Custom callback



  initialize: ->
    # Events
    self = this
    $(document).on 'click', '.blind header', (e) ->
      self.headerClickCallback this, (e)

    #$(document).on 'mousewheel', '.blind', (e) ->
    #  self.mousewheelCallback this, e

    $(window).on 'resize', (e) ->
      self.resizeCallback this, e

    $(window).on 'orientationchange', (e) ->
      self.orientationCallback()

    # Cache jQuery objects
    $.each $('.blind'), (i, s) ->
      self.blinds.push $ s

    # Calculate initial sizes
    $(window).trigger 'resize'

    # Check to see if phone in landscape
    if window.orientation == 90 or window.orientation == -90
      self.expandAll()

    # Fade out loading overlay
    @fnFadeIn(this) if @fnFadeIn

    # Initial animation
    setTimeout (->
      self.blinds[0].find('header').click()), self.fadeDuration * 2


# Set Jquery default easing
$.easing.def = "easeInOutCubic"
